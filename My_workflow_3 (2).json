{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "url": "https://newsapi.org/v2/top-headlines?category=technology&apiKey=a5df67d5f5f54c4ea8fb92abf6a9cdfd",
        "options": {}
      },
      "name": "Fetch Tech News",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1260,
        900
      ],
      "id": "d7c57088-789f-44d3-a9dc-bc79f5c5e0c8"
    },
    {
      "parameters": {},
      "name": "Cron2",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        920,
        900
      ],
      "id": "e283b26b-247b-4c19-bcaa-910188236422"
    },
    {
      "parameters": {
        "functionCode": "if (!items[0]?.json?.articles || !Array.isArray(items[0].json.articles)) {\n  return [];\n}\nreturn items[0].json.articles.slice(0, 3).map(article => ({\n  json: {\n    title: article.title || '',\n    description: article.description || '',\n    link: article.url || '',\n    image: article.urlToImage || ''\n  }\n}));"
      },
      "name": "Extract Articles2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1540,
        900
      ],
      "id": "5fc157bd-2f69-4f46-a3eb-b26b2d737924"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=AIzaSyAk7Wr-X9CZng22jdYwnLPsMDK15VA7aVQ",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"You are a humorous and creative tech news writer.\\n\\nHere's the breaking news:\\nTitle: {{ $json.title }}\\nContent: {{ $json.description }}\\nLink: {{ $json.link }}\\nImage: {{ $json.image }}\\n\\nWrite an article that includes:\\n- A short, punchy summary\\n- Background & consequences\\n- A joke\\n- A CEO quote\\n- 2-3 brainstorming questions\\n- 2-3 image ideas\\n- Source link at the bottom\\n\\nReturn a JSON object with these keys:\\n- title (repeat the one above)\\n- image (same as above)\\n- summary\\n- content\\n- jokes\\n- quote\\n- questions (array)\\n- imageIdeas (array)\\n- source\"\n        }\n      ]\n    }\n  ]\n}\n"
      },
      "name": "Call Gemini2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1940,
        900
      ],
      "id": "9ab71535-4ea0-4875-ab94-250184bfe779"
    },
    {
      "parameters": {
        "functionCode": "const geminiResponses = $input.all();\nconst originalArticles = $input.all(1);\n\nconst results = [];\n\nfor (let i = 0; i < geminiResponses.length; i++) {\n  const geminiItem = geminiResponses[i].json;\n  const originalItem = originalArticles[i]?.json || {};\n\n  const text = geminiItem?.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n  let jsonText = text.trim();\n  if (jsonText.startsWith(\"```json\")) {\n    jsonText = jsonText.replace(/^```json\\s*/, \"\").replace(/```$/, \"\").trim();\n  }\n\n  try {\n    const parsed = JSON.parse(jsonText);\n\n    results.push({\n      json: {\n        title: parsed.title || originalItem.title || \"Untitled\",\n        summary: parsed.summary || \"[Missing summary]\",\n        content: parsed.content || \"[Missing content]\",\n        jokes: parsed.jokes || \"[Missing joke]\",\n        quote: parsed.quote || \"[Missing quote]\",\n        questions: parsed.questions || [],\n        imageIdeas: parsed.imageIdeas || [],\n        source: parsed.source || originalItem.link || \"\",\n        image: parsed.image || originalItem.image || \"\",\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (err) {\n    console.warn(`Skipping item ${i + 1}: Invalid JSON â€“ ${err.message}`);\n    results.push({\n      json: {\n        title: \"[Invalid JSON]\",\n        summary: \"[Gemini returned invalid JSON]\",\n        content: text,\n        image: originalItem.image || \"\",\n        source: originalItem.link || \"\",\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;\n"
      },
      "name": "Parse Gemini Output2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2300,
        900
      ],
      "id": "1f689fc1-7d31-4778-83b5-e250398d8d95"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://firstnode-li1f.onrender.com/api/articles",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "{\n  \"title\": \"{{$json.title}}\",\n  \"summary\": \"{{$json.summary}}\",\n  \"content\": \"{{$json.content}}\",\n  \"jokes\": \"{{$json.jokes}}\",\n  \"quote\": \"{{$json.quote}}\",\n  \"questions\": \"{{$json.questions}}\",\n  \"images\": \"{{$json.image}}\",\n  \"imageIdeas\": \"{{$json.imageIdeas}}\",\n  \"source\": \"{{$json.source}}\",\n  \"timestamp\": \"{{$json.timestamp}}\"\n}"
      },
      "name": "POST to MERN3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2660,
        900
      ],
      "id": "064ea04c-8e9f-4522-a02c-ad335babf0ec"
    }
  ],
  "pinData": {},
  "connections": {
    "Fetch Tech News": {
      "main": [
        [
          {
            "node": "Extract Articles2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cron2": {
      "main": [
        [
          {
            "node": "Fetch Tech News",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Articles2": {
      "main": [
        [
          {
            "node": "Call Gemini2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Gemini2": {
      "main": [
        [
          {
            "node": "Parse Gemini Output2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Gemini Output2": {
      "main": [
        [
          {
            "node": "POST to MERN3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a4bbc6b0-5f06-4d1f-b6ce-4fd82288c09f",
  "meta": {
    "instanceId": "f52fa6cff4d2e830db2a04d1290be8ead4d52251454ed31986da97b6f85d3b43"
  },
  "id": "jPHfFqBMi3ltBO56",
  "tags": []
}
